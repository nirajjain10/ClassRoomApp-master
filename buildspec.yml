version: 0.2
env:
  secrets-manager:
    Sonar_AccessToken: SRE_Secrets:Sonar_AccessToken
    Sonar_Host: SRE_Secrets:Sonar_Host
Sonar_Project: "SRE-Demo"
phases:
    install:
        commands:
            # installation commands
    pre_build:
        commands:
            #- echo Restore started on `date`
            #- dotnet restore ClassroomApp.csproj
            - echo Logging in to Amazon ECR...
            - aws --version
            - aws ecr get-login-password --region $AWS_DEFAULT_REGION
            - REPOSITORY_URI=852659409621.dkr.ecr.us-east-1.amazonaws.com/ecr_sample_sre
            - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
            - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
            - dotnet tool install --global dotnet-sonarscanner
            - dotnet tool install --global dotnet-coverage
    build:
        commands:
            - echo Build started on `date`
            - dotnet restore
            - dotnet sonarscanner begin /k:"SRE-Demo" /d:sonar.host.url=$Sonar_Host
                    /d:sonar.cs.xunit.reportsPaths="artifacts/xunit/*.xml"
                    /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml 
                    /d:sonar.dotnet.excludeTestProjects=true
                    /d:sonar.login=$Sonar_AccessToken
                    # /d:sonar.qualitygate.wait=true
                    # /d.sonar.qualitygate.timeout=300
            - dotnet build
            - dotnet test
            - dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
            # - curl $Sonar_Host/api/qualitygates/project_status?projectKey=$Sonar_Project >result.json
            # - cat result.json
            # - if [ $(jq -r '.projectStatus.status' result.json) = ERROR ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0 ;fi
            # - dotnet test -c Release ./test/ClassroomApp.Tests.csproj --logger trx --results-directory ./testresults            
            - dotnet sonarscanner end /d:sonar.login=$Sonar_AccessToken

            # - sleep 5            
            # - quality_status='url -s -u  $Sonar_AccessToken: $Sonar_Host/api/qualitygates/project_status?projectKey=$Sonar_Project | jq '.projectStatus.status' | tr -d '"'`
            # - echo $quality_status
            # - if [ "$quality_status" = "OK" ] then
            #     exit 0
            #   elif [ "$quality_status" = "ERROR" ] then
            #     exit 1
            #   fi           

            - dotnet publish --no-restore --output build_output
            # - dotnet publish -c release -o ./build_output ClassroomApp.csproj
            # - echo Building the Docker image...
            # - docker build -t $REPOSITORY_URI:latest .
            # - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG 
    post_build:
        commands:
            - echo Build completed on `date`
            #- quality_status=$(curl -u ${Sonar_AccessToken}: ${Sonar_Host}/api/qualitygates/project_status?projectKey=${Sonar_Project} | jq -r '.projectStatus.status')
            - curl -u $Sonar_AccessToken:'' $Sonar_Host/api/qualitygates/project_status?projectKey=$Sonar_Project > result.json
            - cat result.json
            - echo result.json
            - quality_status=$(curl -u ${Sonar_AccessToken}:'' ${Sonar_Host}/api/qualitygates/project_status?projectKey=${Sonar_Project} | jq -r '.projectStatus.status')
            - echo $quality_status
            #- if [ $quality_status = ERROR ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0 ; fi
            
            # - echo Pushing the Docker image...
            # - docker push $REPOSITORY_URI:latest
            # - docker push $REPOSITORY_URI:$IMAGE_TAG
            # - echo Writing image definitions file...
            # - printf '[{"name":"ClassroomApp","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
            # - cat imagedefinitions.json 
artifacts:
  files:    
    - ./build_output/**/*
    #- imagedefinitions.json
    #- scripts/**/*
    #- appspec.yml